''' Makes gene alignments from folder containing fasta file of CDSs'''

''' USAGE: ipython -- gene_aligner.ipy -i 00_genome_in -o output_folder -t 16 -a aa'''

''' Made to test rates of evolution in genomes.
Step 1: make gene alignments - this script 
Step 2: concatenate all 
Step 3: make phylogeny
Step 4: run baseml for the concatenated dataset
Step 5: run baseml gene by gene '''

'''mac verison - 08 Jan 2016 '''

# Import stuff
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from Bio.Seq import Seq
import regex
import re
from Bio.Phylo.PAML import baseml
from argparse import ArgumentParser


# Define input and output variables:
parser = ArgumentParser()
parser.add_argument('-i', '--input_folder', help='The path to the folder containing the genome fasta files', required=True)
parser.add_argument('-o', '--output_folder', help='The name of an output folder', required=True)
parser.add_argument('-t', '--threads', help='The number of threads to run mafft', required=True)
parser.add_argument('-a', '--nt_or_aa', help='Alignment based on aminoacids (aa) or nucleotides (nt)', required=True)


args = parser.parse_args()
input_folder = args.input_folder
output_folder = args.output_folder
n_threads = int(args.threads)
nt_or_aa = str(args.nt_or_aa)

# comment later
#input_folder = "00_CGenomes"
#output_folder = "01_Gene_alignments"
#n_threads = 1
#nt_or_aa = "aa" # alignment based on nt or aminoacids seqs 

!mkdir {output_folder}
unaligned_folder_nt = output_folder + "/" + "unaligned_genes_nt"
unaligned_folder_aa = output_folder + "/" + "unaligned_genes_aa"
aligned = output_folder
!mkdir {unaligned_folder_nt}
!mkdir {unaligned_folder_aa}

''' Step 1 - gene alignments '''

# read files and store the file path of each sample
!ls {input_folder}/*.fasta > species_to_be_analysed.txt

with open("species_to_be_analysed.txt") as file:
	each_sp_fp = str('\n'.join(file.readlines()[:]))
	each_sp_fp = each_sp_fp.split('\n\n')
	each_sp_fp[-1] = each_sp_fp[-1].translate(None, "\n") # remove last \n


# function to separate genes:
def gene_sorter (input_sample):
	sample_name_fp = str(input_sample)
	for seq_record in SeqIO.parse(input_sample, "fasta"):

		# sort out species name
		gene = seq_record.id
		seq = str(seq_record.seq)

		species_name = re.split('/|.fasta', sample_name_fp)
		new_id = str(species_name[2]) # This varies 1 in running piece by piece and 2 when running whole script at once!!
		newrec=SeqRecord(Seq(seq),id=(new_id),name="",description="")

		# append seq to dictonary
		if str(gene) in genes_dict:
			genes_dict[gene].append(newrec)

		else:
			store_seqs = []
			store_seqs.append(newrec)
			genes_dict[gene] = store_seqs


#Function to translate seqs:
def nt_translator (input_seq_list):
	store_aa = []
	gene_name = str(input_seq_list)
	gene_name = gene_name.split('/')
	gene_name = gene_name[-1]


	for seq_record in SeqIO.parse(input_seq_list, "fasta"):
		try:
			new_seq = seq_record.seq.translate(table=11, cds=True)
		except Exception as e:
			print "problem with %s" %(gene_name)
			print "check %s" %(seq_record.id)
			print(e)
			print ""
		
		new_rec = SeqRecord(Seq(str(new_seq)),id=(seq_record.id),name="",description="")
		store_aa.append(new_rec)
		amino_dict[gene_name] = store_aa



# Separate genes from all samples:
genes_dict = {}
for alga in each_sp_fp:
	gene_sorter (alga)

# Save pre-alignment files
for i in genes_dict:
	seq_list = genes_dict[i]
	SeqIO.write(seq_list, unaligned_folder_nt + "/" + str(i) + ".fasta", "fasta")


# Translate seqs into aminoacids and save it:
amino_dict = {}
genes_to_translate = !ls {unaligned_folder_nt}

for gene in genes_to_translate:
	input_file_path = unaligned_folder_nt + "/" + gene
	nt_translator (input_file_path)

# Save translated seqs:
for i in amino_dict:
	aa_list = amino_dict[i]
	SeqIO.write(aa_list, unaligned_folder_aa + "/" + str(i), "fasta")



### Produce nt alignemnts with mafft
if nt_or_aa == "nt":
	genes_to_aln = !ls {unaligned_folder_nt}
	unaligned_folder_x = unaligned_folder_nt
	output_subfolder = output_folder + "/" + "aligned_genes_nt"
	print ""
if nt_or_aa == "aa":
	genes_to_aln = !ls {unaligned_folder_aa}
	unaligned_folder_x = unaligned_folder_aa
	output_subfolder = output_folder + "/" + "aligned_genes_aa"
else:
	print "define type of alignment (nt or aa)"

!mkdir {output_subfolder}

for aln in genes_to_aln:
	if "orf" not in aln: # exclude orfs
		input_file = unaligned_folder_x + "/" + aln
		output_file = output_subfolder + "/" + aln
		!mafft --thread {n_threads} {input_file} > {output_file}


# back translate:
if nt_or_aa == "aa":
	output_subfolder_revtrans = output_folder + "/" + "aligned_genes_revtrans"
	aminoac_folder = !ls {output_subfolder}
	!mkdir {output_subfolder_revtrans}

	for i in aminoac_folder:
		input_aa_file = output_subfolder + "/" + i # file containing aa seqs aligned
		input_nt_file = unaligned_folder_nt + "/" + i # file of unaligned seqs
		output_revtrans_file = output_subfolder_revtrans + "/" + i

		!revtrans.py {input_nt_file} {input_aa_file} -mtx 11 > {output_revtrans_file}


print ""
print "Done!!!"
print ""

